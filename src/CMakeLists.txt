cmake_minimum_required(VERSION 3.27.0 FATAL_ERROR)

project(MyProj VERSION 0.1.0 LANGUAGES CXX C)

# Message mode is usually STATUS or VERBOSE but all of the
# following are valid:
# FATAL_ERROR, SEND_ERROR, WARNING, AUTHOR_WARNING, DEPRECATION,
# (none) or NOTICE, STATUS, VERBOSE, DEBUG, TRACE
# message(STATUS "")

set(IS_COLOR_SUPPORTED TRUE)
if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
	add_compile_options("-fdiagnostics-color")
else()
	set(IS_COLOR_SUPPORTED FALSE)
endif()

if (IS_COLOR_SUPPORTED)
	message(VERBOSE "Enabling color coded error messages")
else()
	message(VERBOSE "C++ compiler ${CMAKE_CXX_COMPILER_ID} does not supported colored error messages")
endif()

add_executable(main	main.cpp)

# Setting C++ standard
set_target_properties(main PROPERTIES
	CXX_STANDARD 23
	CXX_STANDARD_REQUIRED TRUE
)
# OR
# target_compile_features(main PRIVATE cxx_std_23)
# OR
## must be placed before creating targets (i.e. add_executable)
# set(CMAKE_CXX_STANDARD 23)


set_target_properties(main PROPERTIES
	# Output directory in which to build RUNTIME target files.
	#[[
	A runtime output artifact of a buildsystem target may be:

    The executable file (e.g. .exe) of an executable target
    created by the add_executable() command.

    On DLL platforms: the executable file (e.g. .dll) of a
    shared library target created by the add_library()
    command with the SHARED option.

    Source:
	https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#runtime-output-artifacts
	]]
	RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
	# Output directory in which to build LIBRARY target files.
	#[[
	A library output artifact of a buildsystem target may be:

    The loadable module file (e.g. .dll or .so) of a module
    library target created by the add_library() command with
    the MODULE option.

    On non-DLL platforms: the shared library file (e.g. .so
    or .dylib) of a shared library target created by the
    add_library() command with the SHARED option.
	
	Source:
	https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#library-output-artifacts
	]]
	LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib-dynamic"
	# Output directory in which to build ARCHIVE target files.
	#[[
	An archive output artifact of a buildsystem target may be:

    The static library file (e.g. .lib or .a) of a static
    library target created by the add_library() command
    with the STATIC option.

    On DLL platforms:
    the import library file (e.g. .lib) of a shared library
    target created by the add_library() command with the
    SHARED option. This file is only guaranteed to exist if
    the library exports at least one unmanaged symbol.

    On DLL platforms:
    the import library file (e.g. .lib) of an executable
    target created by the add_executable() command when
    its ENABLE_EXPORTS target property is set.

    On AIX:
    the linker import file (e.g. .imp) of an executable
    target created by the add_executable() command when its
    ENABLE_EXPORTS target property is set.

    On macOS:
    the linker import file (e.g. .tbd) of a shared library
    target created by the add_library() command with the
    SHARED option and when its ENABLE_EXPORTS target
    property is set.
	
	Source:
	https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#archive-output-artifacts
	]]
	ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib-static"
	# Output directory for the MS debug symbols .pdb file generated by the linker for an executable or shared library target.
	PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/pdb" 
	# Output directory for the MS debug symbol .pdb file generated by the compiler while building source files.
	COMPILE_PDB_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/compile_pdb"
)

# By default, the add_library() command defines a STATIC library
# The BUILD_SHARED_LIBS variable may be enabled to change
# the behavior of add_library() to build shared libraries by default.
# add_library(library static library.cpp)
# target_include_directories(main PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/library/include")


# target_link_libraries(main PRIVATE library)

